name: Package Publisher
on:
  workflow_call:
    outputs:
      release_url:
        description: "GitHub release URL for the published package"
        value: ${{ jobs.publish.outputs.release_url }}
      version:
        description: "Version of the package"
        value: ${{ jobs.version.outputs.version }}
      changed:
        description: "Whether the version of the package has changed"
        value: ${{ jobs.version.outputs.changed }}

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      changed: ${{ steps.version.outputs.changed }}
      version: ${{ steps.version.outputs.version }}
      previous_version: ${{ steps.version.outputs.previous_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bump release version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: ""
          version_format: ${major}.${minor}.${patch}
          major_pattern: "/^(major|breaking).+/"
          minor_pattern: "/^(minor|feat).+/"
          bump_each_commit: false
          bump_each_commit_patch_pattern: "/^(patch|fix).+/"
          search_commit_body: true
          user_format_type: "json"
          change_path: "."

  publish:
    runs-on: ubuntu-latest
    needs: [version]
    if: ${{ needs.version.outputs.changed == 'true' }}
    permissions:
      pages: write
      contents: write
      id-token: write
    outputs:
      release_url: ${{ steps.github-release.outputs.release-url }}
      download_url: ${{ steps.github-release.outputs.download-url }}
      preview_url: ${{ steps.set-preview-url.outputs.preview_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: install
        run: npm ci

      - name: build
        run: npm run build

      - name: build web UI
        run: npm run build:web

      - name: npm version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION="${{ needs.version.outputs.version }}"
          else
            VERSION="${{ needs.version.outputs.version }}-commit-${{ github.sha }}"
          fi
          npm version "$VERSION" --force --no-git-tag-version --allow-same-version

      - name: npm pack
        id: npm-pack
        run: |
          PACK_OUTPUT=$(npm pack --json)
          PACK_FILENAME=$(echo "$PACK_OUTPUT" | jq -r '.[0].filename')
          echo "pack-filename=$PACK_FILENAME" >> $GITHUB_OUTPUT

      - name: Upload package to GitHub Release
        uses: ./.github/actions/github-release
        id: github-release
        with:
          file-path: ${{ steps.npm-pack.outputs.pack-filename }}
          tag-name: ${{ needs.version.outputs.version }}
          release-name: ${{ needs.version.outputs.version }}
          prerelease: ${{ github.ref != 'refs/heads/main' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: sanitize branch
        id: sanitize-branch
        run: |
          branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          safe_branch=${branch//\//-}  # replace / with -
          echo "safe_branch=$safe_branch" >> $GITHUB_OUTPUT

      - name: prepare deployment folder ("hack" for subpaths in github pages url)
        run: |
          safe_branch=${{ steps.sanitize-branch.outputs.safe_branch }}
          mkdir -p ./deploy/$safe_branch
          # Copy web UI files
          cp -r ./web/* ./deploy/$safe_branch/
          # Update the HTML title to include version
          sed -i "s/glTF Validator TS - Web Interface/glTF Validator TS v${{ needs.version.outputs.version }} - Web Interface/g" ./deploy/$safe_branch/index.html

      - name: upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./deploy
          name: gltf-validator

      - name: deploy to gh-pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: gltf-validator

      - name: set preview url
        id: set-preview-url
        run: |
          safe_branch=${{ steps.sanitize-branch.outputs.safe_branch }}
          REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
          echo "preview_url=https://${{ github.repository_owner }}.github.io/$REPO_NAME/$safe_branch" >> $GITHUB_OUTPUT

      - name: publish to npm registry
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: ./.github/actions/npm-publish
        id: npm-publish
        with:
          working-directory: .
          npm-token: ${{ secrets.NPM_TOKEN }}
          initial-tag: 'latest'
          access: 'public'

  notify:
    needs: [version, publish]
    if: ${{ github.event.pull_request.number && needs.version.outputs.changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Test @dcl/gltf-validator-ts package

      - name: create or update comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            # Test @dcl/gltf-validator-ts package

            - Preview: [link](${{ needs.publish.outputs.preview_url }})
            - Download package: [Download](${{ needs.publish.outputs.download_url }})
            - Install via GitHub Release:
              ```bash
              npm install ${{ needs.publish.outputs.download_url }}
              ```
            - Install from npm (main branch only):
              ```bash
              npm install @dcl/gltf-validator-ts@latest
              ```
          edit-mode: replace
